# =============================================================================
# OVERVIEW STUFF

# Okaydokay

# Basic shortcuts:
# mod+hjkl		move to window
# mod+Shift+hjkl	move window in direction

# mod+e		spec workspace mode
# mod+Shift+e	move container to spec workspace mode
# mod+w		move workspace to output mode
# mod+r		resize mode

# mod+u		previous workspace
# mod+i		next workspace

# mod+f		fullscreen
# mod+Return	execute termite
# mod+Shift+q	kill
# mod+d		rofi

# mod+v		vertical split
# mod+s		horizontal split
# mod+o		tile
# mod+p		tab
# mod+Shift+p	stack
# mod+Space	toggle floating select
# mod+Shift+Space	toggle floating mode

# mod+Shift+x	lock the screen

# Note: at least on my system the media keys don't work, but this is just the default config, and I can't be bothered to fix them...

# =============================================================================
# START OF AUTO GENERATED STUFF ===============================================
#
# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see http://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:hack 12

# thin borders
# hide_edge_borders both

# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
#bindsym $mod+Return exec termite
bindsym $mod+t exec termite
bindsym $mod+Return exec alacritty --config-file ~/.config/alacritty/alacritty.yml.NEON
bindsym $mod+Shift+Return exec alacritty --config-file ~/.config/alacritty/alacritty.yml.TTY
bindsym $mod+g exec cool-retro-term

# kill focused window
bindsym $mod+Shift+q kill



# END OF AUTO GENERATION STUFF ================================================


# =============================================================================
# Interaction

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+s split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+o layout toggle split
bindsym $mod+p layout tabbed
bindsym $mod+Shift+p layout stacking

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym j resize grow height 10 px or 10 ppt
        bindsym k resize shrink height 10 px or 10 ppt
        bindsym l resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"


# =============================================================================
# Workspaces

# set workspace variables
set $workspace1 "1"
set $workspace2 "2"
set $workspace3 "3"
set $workspace4 "4"
set $workspace5 "5"
set $workspace6 "6"
set $workspace7 "7"
set $workspace8 "8"
set $workspace9 "9"
set $workspace10 "10"

# switch to workspace
bindsym $mod+1 workspace $workspace1
bindsym $mod+2 workspace $workspace2
bindsym $mod+3 workspace $workspace3
bindsym $mod+4 workspace $workspace4
bindsym $mod+5 workspace $workspace5
bindsym $mod+6 workspace $workspace6
bindsym $mod+7 workspace $workspace7
bindsym $mod+8 workspace $workspace8
bindsym $mod+9 workspace $workspace9
bindsym $mod+0 workspace $workspace10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $workspace1
bindsym $mod+Shift+2 move container to workspace $workspace2
bindsym $mod+Shift+3 move container to workspace $workspace3
bindsym $mod+Shift+4 move container to workspace $workspace4
bindsym $mod+Shift+5 move container to workspace $workspace5
bindsym $mod+Shift+6 move container to workspace $workspace6
bindsym $mod+Shift+7 move container to workspace $workspace7
bindsym $mod+Shift+8 move container to workspace $workspace8
bindsym $mod+Shift+9 move container to workspace $workspace9
bindsym $mod+Shift+0 move container to workspace $workspace10

# select next or previous workspace
bindsym $mod+u workspace prev_on_output
bindsym $mod+i workspace next_on_output

# move workspace to a screen
mode "move workspace" {
	# Pressing left will move the currently active workspace to the Display to the left
	# Pressing right will move the currently active workspace to the Display to the right
	# Pressing up will move the currently active workspace to the Display to the up
	# Pressing down will move the currently active workspace to the Display to the down
	bindsym h move workspace to output left
	bindsym j move workspace to output down
	bindsym k move workspace to output up
	bindsym l move workspace to output right

	# Same for the arrow keys
	bindsym Left move workspace to output left
	bindsym Down move workspace to output down
	bindsym Up move workspace to output up
	bindsym Right move workspace to output right

	# Back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+w mode "move workspace"

# jump to a custom, specific workspace
set $jump_spec_workspace "jump to specific workspace"
mode $jump_spec_workspace {

	# add characters to the target file
	# the target file should end up containing the name of the target workspace
	bindsym 0 exec "printf 0 >> ~/.i3/target-workspace"
	bindsym 1 exec "printf 1 >> ~/.i3/target-workspace"
	bindsym 2 exec "printf 2 >> ~/.i3/target-workspace"
	bindsym 3 exec "printf 3 >> ~/.i3/target-workspace"
	bindsym 4 exec "printf 4 >> ~/.i3/target-workspace"
	bindsym 5 exec "printf 5 >> ~/.i3/target-workspace"
	bindsym 6 exec "printf 6 >> ~/.i3/target-workspace"
	bindsym 7 exec "printf 7 >> ~/.i3/target-workspace"
	bindsym 8 exec "printf 8 >> ~/.i3/target-workspace"
	bindsym 9 exec "printf 9 >> ~/.i3/target-workspace"
	bindsym a exec "printf a >> ~/.i3/target-workspace"
	bindsym b exec "printf b >> ~/.i3/target-workspace"
	bindsym c exec "printf c >> ~/.i3/target-workspace"
	bindsym d exec "printf d >> ~/.i3/target-workspace"
	bindsym e exec "printf e >> ~/.i3/target-workspace"
	bindsym f exec "printf f >> ~/.i3/target-workspace"
	bindsym g exec "printf g >> ~/.i3/target-workspace"
	bindsym h exec "printf h >> ~/.i3/target-workspace"
	bindsym i exec "printf i >> ~/.i3/target-workspace"
	bindsym j exec "printf j >> ~/.i3/target-workspace"
	bindsym k exec "printf k >> ~/.i3/target-workspace"
	bindsym l exec "printf l >> ~/.i3/target-workspace"
	bindsym m exec "printf m >> ~/.i3/target-workspace"
	bindsym n exec "printf n >> ~/.i3/target-workspace"
	bindsym o exec "printf o >> ~/.i3/target-workspace"
	bindsym p exec "printf p >> ~/.i3/target-workspace"
	bindsym q exec "printf q >> ~/.i3/target-workspace"
	bindsym r exec "printf r >> ~/.i3/target-workspace"
	bindsym s exec "printf s >> ~/.i3/target-workspace"
	bindsym t exec "printf t >> ~/.i3/target-workspace"
	bindsym u exec "printf u >> ~/.i3/target-workspace"
	bindsym v exec "printf v >> ~/.i3/target-workspace"
	bindsym w exec "printf w >> ~/.i3/target-workspace"
	bindsym x exec "printf x >> ~/.i3/target-workspace"
	bindsym y exec "printf y >> ~/.i3/target-workspace"
	bindsym z exec "printf z >> ~/.i3/target-workspace"

	# Note: ~/.i3 is my custom location for i3 related scripts and temp-files
	# Note: that the code in ~/.i3/ has to have absolute paths, cause i3 doesn't run from there...

	# move to the target workspace
        bindsym Return exec ~/.i3/jump_to_specific_workspace.sh

	# cancel actions
        bindsym Escape exec ~/.i3/cancel_specific_workspace.sh
}

bindsym $mod+e mode $jump_spec_workspace

# move container to a custom specific workspace
set $move_spec_workspace "move container to specific workspace"
mode $move_spec_workspace {

	# add characters to the target file
	# the target file should end up containing the name of the target workspace
	bindsym 0 exec "printf 0 >> ~/.i3/target-workspace"
	bindsym 1 exec "printf 1 >> ~/.i3/target-workspace"
	bindsym 2 exec "printf 2 >> ~/.i3/target-workspace"
	bindsym 3 exec "printf 3 >> ~/.i3/target-workspace"
	bindsym 4 exec "printf 4 >> ~/.i3/target-workspace"
	bindsym 5 exec "printf 5 >> ~/.i3/target-workspace"
	bindsym 6 exec "printf 6 >> ~/.i3/target-workspace"
	bindsym 7 exec "printf 7 >> ~/.i3/target-workspace"
	bindsym 8 exec "printf 8 >> ~/.i3/target-workspace"
	bindsym 9 exec "printf 9 >> ~/.i3/target-workspace"
	bindsym a exec "printf a >> ~/.i3/target-workspace"
	bindsym b exec "printf b >> ~/.i3/target-workspace"
	bindsym c exec "printf c >> ~/.i3/target-workspace"
	bindsym d exec "printf d >> ~/.i3/target-workspace"
	bindsym e exec "printf e >> ~/.i3/target-workspace"
	bindsym f exec "printf f >> ~/.i3/target-workspace"
	bindsym g exec "printf g >> ~/.i3/target-workspace"
	bindsym h exec "printf h >> ~/.i3/target-workspace"
	bindsym i exec "printf i >> ~/.i3/target-workspace"
	bindsym j exec "printf j >> ~/.i3/target-workspace"
	bindsym k exec "printf k >> ~/.i3/target-workspace"
	bindsym l exec "printf l >> ~/.i3/target-workspace"
	bindsym m exec "printf m >> ~/.i3/target-workspace"
	bindsym n exec "printf n >> ~/.i3/target-workspace"
	bindsym o exec "printf o >> ~/.i3/target-workspace"
	bindsym p exec "printf p >> ~/.i3/target-workspace"
	bindsym q exec "printf q >> ~/.i3/target-workspace"
	bindsym r exec "printf r >> ~/.i3/target-workspace"
	bindsym s exec "printf s >> ~/.i3/target-workspace"
	bindsym t exec "printf t >> ~/.i3/target-workspace"
	bindsym u exec "printf u >> ~/.i3/target-workspace"
	bindsym v exec "printf v >> ~/.i3/target-workspace"
	bindsym w exec "printf w >> ~/.i3/target-workspace"
	bindsym x exec "printf x >> ~/.i3/target-workspace"
	bindsym y exec "printf y >> ~/.i3/target-workspace"
	bindsym z exec "printf z >> ~/.i3/target-workspace"

	# move to the target workspace
        bindsym Return exec ~/.i3/move_to_specific_workspace.sh

	# cancel actions
        bindsym Escape exec ~/.i3/cancel_specific_workspace.sh
}

bindsym $mod+Shift+e mode $move_spec_workspace


# =============================================================================
# Meta Stuff

# reload the configuration file
bindsym $mod+Shift+c reload

# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# exit i3 (logs you out of your X session)
#bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# lock
bindsym $mod+Shift+x exec i3lock --color 171717
# bindsym $mod+Shift+x exec ~/.i3/blur_lock.sh

# toggle esc caps swap
bindsym $mod+x exec xmodmap ~/.i3/Xmodmap

# Autostart apps
# exec --no-startup-id gnome-settings-daemon
exec --no-startup-id /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
exec --no-startup-id "compton"
exec --no-startup-id nm-applet
exec --no-startup-id "sleep 5s && kalu"


# Multimedia Keys

# volume
bindsym XF86AudioRaiseVolume exec amixer -D pulse sset Master 5%+ && pkill -RTMIN+1 i3blocks
bindsym XF86AudioLowerVolume exec amixer -D pulse sset Master 5%- && pkill -RTMIN+1 i3blocks

# granular volume control
bindsym $mod+XF86AudioRaiseVolume exec amixer -D pulse sset Master 1%+ && pkill -RTMIN+1 i3blocks
bindsym $mod+XF86AudioLowerVolume exec amixer -D pulse sset Master 1%- && pkill -RTMIN+1 i3blocks

# mute
bindsym XF86AudioMute exec amixer sset Master toggle && killall -USR1 i3blocks

bindsym XF86AudioPlay exec playerctl play
bindsym XF86AudioPause exec playerctl pause
bindsym XF86AudioNext exec playerctl next
bindsym XF86AudioPrev exec playerctl previous

# bindsym XF86AudioPlay exec mocp --toggle-pause
# bindsym XF86AudioPause exec mocp --toggle-pause
# bindsym XF86AudioStop exec mocp --togle-pause
# bindsym XF86AudioNext exec mocp --next
# bindsym XF86AudioPrev exec mocp --previous

bindsym $mod+F5 exec mocp --toggle-pause
bindsym $mod+F6 exec mocp --stop
bindsym $mod+F7 exec mocp --previous
bindsym $mod+F8 exec mocp --next

# Redirect sound to headphones
bindsym $mod+m exec "/usr/local/bin/switch-audio-port"


# =============================================================================
# Multi Monitor Setup

# restore layout
# the command that generates these layouts: arandr
exec ~/.screenlayout/triple_monitor_setup.sh

# put assigned workspaces onto their screens
workspace $workspace1 output HDMI-0
workspace $workspace2 output DP-0
workspace $workspace3 output DP-2


# =============================================================================
# Color Scheme / Rice

set $bg-color            #2f343f
set $inactive-bg-color   #2f343f
set $text-color          #f3f4f5
set $inactive-text-color #676e7d
set $urgent-bg-color     #e53935
set $indicator-color     #a0a0a0

# set $focused		 #006699
# set $focused		 #0b6189
set $focused		 #16b1fb

# set window colors
#                       border             background         text                 indicator
client.focused          $bg-color          $focused           $text-color          $focused
client.unfocused        $inactive-bg-color $inactive-bg-color $inactive-text-color $inactive-bg-color
client.focused_inactive $inactive-bg-color $inactive-bg-color $inactive-text-color $inactive-bg-color
client.urgent           $urgent-bg-color   $urgent-bg-color   $text-color          $urgent-bg-color

# floating windows
for_window [class="Pavucontrol"] floating enable
for_window [class="Kalu"] floating enable

# background images
exec_always nitrogen --restore

# polybar
exec_always --no-startup-id $HOME/.config/polybar/launch.sh

# rofi
# bindsym $mod+d exec rofi -show run -theme ~/.config/rofi/theme.rasi
bindsym $mod+d exec dmenu_run -i -l 44 -fn 'Monaco'

# gaps config
for_window [class="^.*"] border pixel 0
gaps inner 5
smart_gaps on

# borders
# get window class with xprop and read the WM_CLASS(STRING) variable
for_window [class="^.*"] border pixel 2

