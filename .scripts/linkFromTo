#!/bin/sh

helptxt="linkFromTo -- Hard link all files under <source> to <target>.

   Note that 'all' includes hidden files.

Usage:

   linkFromTo <source> <target> [<include regex> [<exclude regex> [<dry>]]]
   linkFromTo -h|--help|help

Options and Arguments:

   -h|--help|help    print this help text

   <source>	     source directory
   <target>    	     target directory
   <include regex>   paths that match this regex are included;
		     defaults to \".*\"
   <exclude regex>   paths that match this regex are excluded, even if they
		     also match the include regex; defaults to \"\"
   <dry>	     if this isn't null, printout the files that would be
		     linked, without modifying the directory tree

Regex:

   The regex are awk-style and ignore casing.

   The regex will be surrounded with \".*\", so:

      linkFromTo some/src/dir some/tgt/dir 'Florence' 'Lungs'

   uses the following find command:

      find "some/src/dir" -iregex '.*Florence.*' -not -iregex '.*Lungs.*'
"


[ "$1" = "help" -o "$1" = "-h" -o "$1" = "--help" ] && { echo "$helptxt"; exit 0; }
[ -z "$1" ] && { echo "source directory required"; exit 1; } || src="$1"
[ -z "$2" ] && { echo "target directory required"; exit 1; } || tgt="$2"
[ -z "$3" ] && include=".*" || include=".*$3.*"
[ -z "$4" ] && exclude="" || exclude=".*$4.*"

find "$src" -type f -regextype awk -iregex "$include" -not -iregex "$exclude" -printf "%P\n" | while read -r file; do
   [ ! -z "$5" ] && { echo "$file"; continue; }
   mkdir -p "$tgt$(dirname "$file")"
   ln "$src/$file" "$tgt/$file"
done

# Note: not using xargs with subshell, cause this is just easier to read


# hardlinks a list of files into a target directory
# stdin	 list of files to link
# $1	 target directory

# find
# THE ORDER OF COMMANDS MATTERS, the paths are piped through them!

# xargs
# Use -I or -D to fix quoting rules, or simply embed
# quotation characters into the input stream, i.e. surround
# words with \".
#
# Compound commands with xargs are most easily run in a subshell.
# sh is the subshell command, just as with subshell-expansion it redirects
# stdout from the commands it runs.

# Compound Commands
# Multiple commands are executed in order, their output is redirected to ONE UNIFIED STREAM.
#    ( list )   execute in a subshell
#    { list; }  don't execute in a subshell
#
# This let's you do:
#    (echo "hi"; echo "there"; ls) | xargs ...
# and you'll get "hi there $(ls)" as input to xargs!
